//Nama : M. Adit Prinansyah
//NPM : 1915061002
//Matkul : Struktur Data

//Single Linked List

#include <iostream>
#include<conio.h>
#include<windows.h>
#include <stdio.h>
using namespace std;

int pil;
void pilih();
void buat_baru();
void tambah_belakang();
void tambah_depan();
void hapus_belakang();
void hapus_depan();
void tampil();

struct simpul{
 char nim[8], nama[80];
 int umur;
 struct simpul *next;
}mhs, *baru, *awal=NULL, *akhir=NULL, *hapus, *bantu;

void clrscr(){
 system("cls");
}

int main(){
 do{
  clrscr();
  cout << "MENU SINGLE  LINKEDLIST" << endl;
  cout << "1. Tambah Depan" << endl;
  cout << "2. Tambah Belakang" << endl;
  cout << "3. Hapus Depan" << endl;
  cout << "4. Hapus Belakang" << endl;
  cout << "5. Tampil" << endl;
  cout << "6. Selesai" << endl;
  cout << "Pilihan anda: ";
  cin>>pil;
  pilih();
 }while (pil!=6);
 return 0;
}

void pilih(){
 if(pil==1){
  tambah_depan();
 }
 else if(pil==2){
  tambah_belakang();
 }
 else if(pil==3){
  hapus_depan();
 }
 else if(pil==4){
  hapus_belakang();
 }
 else if(pil==5){
  tampil();
 }
}

void buat_baru(){
 baru=(simpul*)malloc(sizeof(struct simpul));
 cout << "Input NIM : ";
 cin >> baru->nim;
 cout << "Input Nama : ";
 cin >>baru->nama;
 cout << "Input Umur : ";
 cin >> baru->umur;
 baru->next=NULL;
}

void tambah_belakang(){
 buat_baru();
 if(awal==NULL){
  awal=baru;
 }
 else{ 
  akhir->next=baru;
 }
 akhir=baru;
 akhir->next=NULL;
 cout << endl << endl;
 tampil();
}

void tambah_depan(){
 buat_baru();
 if(awal==NULL){
  awal=baru;
  akhir=baru;
  akhir->next=NULL;
 }
 else{
  baru->next=awal;
  awal=baru;
 }
 cout << endl << endl;
 tampil();
}

void hapus_depan(){
 if(awal==NULL){
  cout<<"kosong";
 }
 else{
  hapus = awal;
  awal=awal->next;
  free(hapus);
 }
 cout << endl << endl;
 tampil();
}

void hapus_belakang(){
 if(awal==NULL){
  cout << "Kosong";
 }
 else if(awal==akhir){
  hapus = awal;
  awal=awal->next;
  free(hapus);
 }
 else{
  hapus = awal;
  while(hapus->next != akhir){
   hapus = hapus->next;
   akhir=hapus;
   hapus=akhir->next;
   akhir->next=NULL;
   free(hapus);
  }
 }
 cout << endl << endl;
 tampil();
}

void tampil(){
 if(awal==NULL){
  cout << "Kosong";
 }
 else{
  bantu=awal;
  while(bantu!=NULL){
   cout << "NIM : " << bantu->nim << endl;
   cout << "NAMA : " << bantu->nama << endl;
   cout << "UMUR : " << bantu->umur << endl;

 
   bantu=bantu->next;
  }
 }
 getch();
}





//Double Linked List

#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;

struct node{
 int info;
 struct node *next;
 struct node *prev;
}*start;

class double_llist {
 public:
 void create_list(int value);
 void add_begin(int value);
 void add_after(int value, int position);
 void delete_element (int value);
 void searc_element(int value);
 void display_dlist();
 void count();
 void reverse();
 
 double_llist() {
  start = NULL;
 }
};

int main()
{
 int choice, element, position;
 double_llist dl;
 while (1){
  cout<<"-------------------------"<<endl;
  cout<<"-------------------------"<<endl;
  cout<<"1. Create Node"<<endl;
  cout<<"2. Add after beginning"<<endl;
  cout<<"3. Add after position"<<endl;
  cout<<"4. Delete"<<endl;
  cout<<"5. Display"<<endl;
  cout<<"6. Count"<<endl;
  cout<<"7. Reverse"<<endl;
  cout<<"8. Quit"<<endl;
  cout<<"Enter your choice : ";
  cin>>choice;
  
  switch (choice)
  {
   case 1:
    cout<<"Enter the element : ";
    cin>>element;
    dl.create_list(element);
    cout<<endl;
    break;
   case 2:
    cout<<"Enter the element : ";
    cin>>element;
    dl.add_begin(element);
    cout<<endl;
    break;
   //case 3:
   // cout<<"Enter the element : ";
   // cin>>element;
   // dl.add_begin(element);
   // cout<<endl;
   // break;
   case 4:
    if(start == NULL)
    {
     cout<<"List Empty, nothing to delete"<<endl;
     break;
    }
    cout<<"enter the element for deletion : ";
    cin>>element;
    dl.delete_element(element);
    cout<<endl;
    break;
   case 5:
    dl.display_dlist();
    cout<<endl;
    break;
   case 6:
    dl.count();
    break;
   //case 7:
   case 8:
    exit(1);
   default:
    cout<<"Wrong Choice"<<endl;
  }
 }
 return 0;
}


void double_llist::create_list(int value)
{
 struct node *s, *temp;
 temp=new(struct node);
 temp->info=value;
 temp->next=NULL;
 if (start==NULL)
 {
  temp->prev=NULL;
  start = temp;
 }
 else
 {
  s=start;
  while (s->next != NULL)
  s=s->next;
  temp->prev=s;
 }
}


void double_llist::add_begin(int value)
{
 if (start == NULL)
 {
  cout<<"First Create the list "<<endl;
  return;
 }
 struct node *temp;
 temp = new(struct node);
 temp->prev=NULL;
 temp->info=value;
 temp->next=start;
 start->prev=temp;
 start=temp;
 cout<<"element inserted"<<endl;
}


void double_llist::delete_element(int value)
{
 struct node *tmp, *q;
 if(start->info==value)
 {
  tmp=start;
  start=start->next;
  start->prev=NULL;
  cout<<"element deleted"<<endl;
 }
 q=start;
 
 while (q->next->next != NULL)
 {
 if (q->next->info==value)
 {
  tmp=q->next;
  q->next=tmp->next;
  tmp->next->prev=q;
  cout<<"element deleted"<<endl;
  free(tmp);
  return;
 } 
 q=q->next;
 }
 
 if(q->next->info==value)
 {
  tmp=q->next;
  free(tmp);
  q->next=NULL;
  cout<<"element deleted"<<endl;
  return;
 }
 cout<<"element "<<value<<" not found"<<endl;
}


void double_llist::display_dlist()
{
 struct node *q;
 if (start == NULL)
 {
  cout<<"List empty, nothing to display"<<endl;
  return;
 }
 q=start;
 cout<<"the doubly link is :"<<endl;
 while(q!=NULL)
 {
  cout<<q->info<<" <-> ";
  q=q->next;
 }
 cout<<"NULL"<<endl;
}


void double_llist::count()
{
 struct node *q = start;
 int cnt = 0;
 while (q != NULL)
 {
  q=q->next;
  cnt++;
 }
 cout<<"Number of element are : "<<cnt<<endl;
}





//Linked List Circular

#include <iostream>
  #include <stdlib.h>
  using namespace std;
struct Data {
  int nilai;
  Data *next;
  };
  Data *head;
void awal(){
  head=NULL;
  }
  bool isEmpty(){
  if (head==NULL)
  return true;
  return false;
  }
  void tambahDataDepan(int dataBaru) {
  Data *baru;
  baru=(Data*) malloc(sizeof(Data));
  baru->nilai=dataBaru;
  baru->next=baru;
  if (isEmpty()){
  head=baru;
  head->next=head;
  } else {
  Data *bantu;
  bantu=head;
  while (bantu->next!=head){
  bantu=bantu->next;
  }
  baru->next=head;
  head=baru;
  bantu->next=head;
  }
  }
  void tambahDataBelakang(int dataBaru){
  Data *baru;
  baru=(Data*) malloc(sizeof(Data));
  baru->nilai=dataBaru;
  baru->next=baru;
  if (isEmpty()){
  head=baru;
  head->next=head;
  } else {
  Data *bantu;
  bantu=head;
  while (bantu->next!=head){
  bantu=bantu->next;
  }
  bantu->next=baru;
  baru->next=head;
  //head=baru;
  //bantu->next=baru;
  }
  }
  void hapusDepan(){
  if(!isEmpty()){
  if(head->next!=head){
  Data *hapus;
  hapus=head;
  Data *bantu;
  bantu=head;
  while (bantu->next!=head){
  bantu=bantu->next;
  }
  bantu->next=head->next;
  head=head->next;
  delete hapus;
  }
  else {
  awal();
  }
  }
  }
  void hapusBelakang(){/* 
  tambah kode program di sini.... 
*/
}
  void cetak(){
  if (!isEmpty()){
  Data *bantu;
  bantu=head;
  do {
  cout<<bantu->nilai<<" ";
  bantu=bantu->next;
  } while(bantu!=head);
 }
  }
  int main(){
  awal();
  tambahDataBelakang(5);
  tambahDataDepan(7);
  tambahDataBelakang(17);
  hapusDepan();
  hapusDepan();
  cetak();
  return 0;
  }
